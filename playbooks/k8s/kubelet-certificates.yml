##
##   Copyright (c) 2020-2022 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- hosts: localhost
  connection: local
  become: no
  gather_facts: false
  tasks:
    - name: create temporary directory for storing certificate material
      tempfile:
        state: directory
        prefix: kubelet-certs-
      become: no
      register: temp_cert_dir_localhost

- hosts: k8s_cluster
  environment: "{{ proxy_env | d({}) }}"
  any_errors_fatal: true
  tasks:
    - name: set temporary certificate location
      set_fact:
        temp_cert_dir: "{{ hostvars['localhost']['temp_cert_dir_localhost'] }}"

    - name: ensure that CSR directory is present
      file:
        path: "{{ kube_csr_dir }}"
        state: directory
        mode: 0755
      when: inventory_hostname == groups['kube_control_plane'][0]

    - name: template CSR
      template:
        src: node.json.j2
        dest: "{{ kube_csr_dir }}/node-{{ item }}.json"
        owner: root
        group: root
        mode: 0644
      with_items: "{{ groups['k8s_cluster'] }}"
      vars:
        node_ip: "{{ hostvars[item]['ip'] | default(hostvars[item].ansible_default_ipv4['address']) }}"
        node_hostname: "{{ hostvars[groups['kube_control_plane'][0]]['ansible_hostname'] }}"
        node_inventory_name: "{{ inventory_hostname }}"
      when: inventory_hostname == groups['kube_control_plane'][0]

    - name: get GOPATH
      command: /usr/local/go/bin/go env GOPATH
      register: gopath
      changed_when: false
      when: inventory_hostname == groups['kube_control_plane'][0]

    - name: create certs from CSRs
      shell:
        cmd: "{{ gopath.stdout }}/bin/cfssl gencert -ca {{ kube_cert_dir }}/ca.crt \
              -ca-key {{ kube_cert_dir }}/ca.key \
              -profile kubernetes node-{{ item }}.json | {{ gopath.stdout }}/bin/cfssljson -bare {{ item }}"
        chdir: "{{ kube_csr_dir }}"
      when: inventory_hostname == groups['kube_control_plane'][0]
      loop: "{{ groups['k8s_cluster'] }}"

    - name: fetch certs to ansible host
      fetch:
        src: "{{ kube_csr_dir }}/{{ item }}.pem"
        dest: "{{ temp_cert_dir.path }}/"
        flat: yes
      when: inventory_hostname == groups['kube_control_plane'][0]
      loop: "{{ groups['k8s_cluster'] }}"

    - name: fetch keys to ansible host
      fetch:
        src: "{{ kube_csr_dir }}/{{ item }}-key.pem"
        dest: "{{ temp_cert_dir.path }}/"
        flat: yes
      when: inventory_hostname == groups['kube_control_plane'][0]
      loop: "{{ groups['k8s_cluster'] }}"

    - name: distribute certificates to nodes
      copy:
        src: "{{ temp_cert_dir.path }}/{{ inventory_hostname }}.pem"
        dest: "{{ kube_cert_dir }}/"
        owner: root
        group: root
        mode: u=rw,g=r,o=r
      with_items: "{{ groups['k8s_cluster'] }}"

    - name: distribute keys to nodes
      copy:
        src: "{{ temp_cert_dir.path }}/{{ inventory_hostname }}-key.pem"
        dest: "{{ kube_cert_dir }}/"
        owner: root
        group: root
        mode: u=rw,g=,o=
      with_items: "{{ groups['k8s_cluster'] }}"

    - name: insert new values into kubelet configuration
      lineinfile:
        path: "{{ kube_config_dir }}/kubelet-config.yaml"
        line: "{{ item }}"
        mode: 0600
      loop:
        - "tlsPrivateKeyFile: {{ kube_cert_dir }}/{{ inventory_hostname }}-key.pem"
        - "tlsCertFile: {{ kube_cert_dir }}/{{ inventory_hostname }}.pem"


- hosts: localhost
  connection: local
  become: no
  gather_facts: false
  tasks:
    - name: remove directory with certs
      file:
        path: "{{ temp_cert_dir_localhost }}"
        state: absent


- hosts: kube_control_plane
  environment: "{{ proxy_env | d({}) }}"
  tasks:
    - name: set kubelet certificate authority fact
      set_fact:
        kubelet_cert_authority: "- --kubelet-certificate-authority={{ kube_cert_dir }}/ca.crt"
    - name: insert kubelet-authority into api-server configuration
      lineinfile:
        path: "{{ kube_config_dir }}/manifests/kube-apiserver.yaml"
        insertbefore: "--tls-cipher-suites"
        line: "{{ kubelet_cert_authority|indent(4,true) }}"
        mode: 0600

- hosts: k8s_cluster
  gather_facts: false
  tasks:
  - name: restart kubelet on nodes
    service:
      name: kubelet
      state: restarted
