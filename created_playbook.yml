- any_errors_fatal: true
  environment: '{{ proxy_env | d({}) }}'
  handlers:
  - name: reboot server
    reboot:
      reboot_timeout: 1200
  hosts: k8s_cluster,vm_host
  pre_tasks:
  - meta: end_host
    name: End play for VM host
    when:
    - '''vm_host'' in group_names'
    - on_vms | default(false) | bool
  - copy:
      dest: /etc/systemd/system
      src: files/filip.service
    name: create the systemd unit to start the second playbook after reboot
    tags: always
  - command: sudo systemctl enable filip.service
    name: enable the unit to execute at reboot
    tags: always
  - command: sudo systemctl daemon-reload
    name: reload the units
    tags: always
  roles:
  - role: cluster_defaults
  - role: bootstrap/configure_proxy
  - role: bootstrap/install_packages
  - role: bootstrap/update_grub
    when: update_kernel | default(false) | bool
  - role: bootstrap/configure_additional_grub_parameters
  - role: bootstrap/configure_security
  - role: bootstrap/apply_kubernetes_reqs
  - role: bootstrap/configure_dns
    when:
    - ansible_distribution == "Ubuntu" and dns_disable_stub_listener | default(true)
      | bool
    - not vm_enabled or on_vms | default(false) | bool
  - role: bootstrap/golang_install
  tasks: []
- any_errors_fatal: true
  environment: '{{ proxy_env | d({}) }}'
  handlers:
  - name: reboot server
    reboot:
      reboot_timeout: 1200
  hosts: kube_node,vm_host
  pre_tasks:
  - meta: end_host
    name: End play for VM host
    when:
    - '''vm_host'' in group_names'
    - on_vms | default(false) | bool
  roles:
  - role: cluster_defaults
  - role: bootstrap/configure_hugepages
    when: hugepages_enabled | default(true) | bool
  - role: bootstrap/configure_cpu_isolation
    when: isolcpus_enabled | default(false) | bool
  - role: bootstrap/configure_cpusets
    when: cpusets_enabled | default(false) | bool
  - role: bootstrap/configure_intel_pstate
    when: intel_pstate_enabled | default(true) | bool
  - role: bootstrap/configure_cstates
    when: cstate_enabled | default(false) | bool
  - role: bootstrap/configure_ufs
    when: ufs_enabled | default(false) | bool
  - role: bootstrap/set_sriov_kernel_flags
    when: iommu_enabled | default(true) | bool or on_vms | default(false) | bool
  - role: bootstrap/set_rdt_kernel_flags
    when: telegraf_enabled | default(true) | bool
  - role: bootstrap/set_intel_flexran_kernel_flags
    when: intel_flexran_enabled | default(false) | bool
  - role: bootstrap/configure_sst
    when:
    - (ansible_distribution == 'Ubuntu' and ansible_distribution_version >= '20.04')
      or (ansible_distribution == "CentOS" and ansible_distribution_version >= '8.3')
      or (ansible_distribution == "RedHat" and ansible_distribution_version >= '8.3')
      or (ansible_distribution == "Rocky" and ansible_distribution_version >= '8.3')
    - sst_bf_configuration_enabled | default(false) | bool or sst_cp_configuration_enabled
      | default(false) | bool or sst_tf_configuration_enabled | default(false) | bool
      or sst_pp_configuration_enabled | default(false) | bool
    - not vm_enabled or on_vms | default(false) | bool
  - role: bootstrap/install_gpu_kernel
    when:
    - configure_gpu | default(false) | bool
    - not vm_enabled or on_vms | default(false) | bool
  - role: bootstrap/update_grub
  tasks: []
- any_errors_fatal: true
  environment: '{{ proxy_env | d({}) }}'
  handlers:
  - name: reboot server
    reboot:
      reboot_timeout: 1200
  hosts: kube_node,vm_host
  pre_tasks:
  - meta: end_host
    name: End play for VM host
    when:
    - '''vm_host'' in group_names'
    - on_vms | default(false) | bool
  roles:
  - role: cluster_defaults
  - role: bootstrap/apply_intel_pstate
    when: intel_pstate_enabled | default(true) | bool
  - role: bootstrap/install_qat_drivers_services
    when:
    - update_qat_drivers | default(false) | bool
    - qat_devices | default([]) | length > 0
  tasks: []
- any_errors_fatal: true
  environment: '{{ proxy_env | d({}) }}'
  handlers: []
  hosts: kube_node,vm_host
  pre_tasks:
  - meta: end_host
    name: End play for VM host
    when:
    - '''vm_host'' in group_names'
    - on_vms | default(false) | bool
  roles:
  - role: cluster_defaults
  - role: bootstrap/determine_dataplane_interfaces
    when:
    - dataplane_interfaces | default([]) | length > 0
  - role: bootstrap/update_nic_drivers
    when: update_nic_drivers | default(false) | bool
  - role: bootstrap/update_nic_firmware
    when:
    - dataplane_interfaces | default([]) | length > 0
    - update_nic_firmware | default(false) | bool
    - update_nic_drivers | default(false) | bool
  tasks: []
- any_errors_fatal: true
  environment: '{{ proxy_env | d({}) }}'
  handlers: []
  hosts: kube_node,vm_host
  pre_tasks:
  - meta: end_host
    name: End play for VM host
    when:
    - '''vm_host'' in group_names'
    - on_vms | default(false) | bool
  roles:
  - role: cluster_defaults
  - role: install_dpdk
    when:
    - ovs_dpdk_enabled | default(false) | bool or install_dpdk | default(true) | bool
  - role: install_ddp_pkgs
    when: install_ddp_packages | default(true) | bool
  - role: sriov_nic_init
    when:
    - install_dpdk | default(true) | bool
    - iommu_enabled | default(true) | bool
    - (kubernetes | default(true) | bool and not container_runtime_only_deployment
      | default(false) | bool and not sriov_network_operator_enabled | default(true)
      | bool or (not kubernetes | default(true) | bool and container_runtime_only_deployment
      | default(false) | bool))
  - role: bootstrap/configure_qat
    when:
    - qat_devices | default([]) | length > 0
    - iommu_enabled | default(true) | bool or on_vms | default(false) | bool
    - update_qat_drivers | default(false) | bool
  - role: bootstrap/configure_openssl
    when:
    - qat_devices | default([]) | length > 0
    - iommu_enabled | default(true) | bool or on_vms | default(false) | bool
    - update_qat_drivers | default(false) | bool
    - openssl_install | default(false) | bool
  - role: bootstrap/configure_sgx
    when:
    - configure_sgx | default(false) | bool
  tasks:
  - file:
      path: /etc/systemd/system/filip.service
      state: absent
    name: delete the systemd unit
    tags: always
  - command: sudo systemctl daemon-reload
    name: reload the units
    tags: always
