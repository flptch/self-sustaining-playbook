##
##   Copyright (c) 2020-2022 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: create tmp dir for keys-certs
  tempfile:
    state: directory
    suffix: kmra-mtls
  register: mtls_tmp_dir

- name: generate CA root crt
  command: >-
    openssl req -nodes -x509 -newkey rsa:2048
    -keyout {{ (mtls_tmp_dir.path, 'ca.key') | path_join }}
    -out {{ (mtls_tmp_dir.path, 'ca.crt') | path_join }}
    -subj "/O={{ kmra.ca_root_crt_subj.O }}/OU={{ kmra.ca_root_crt_subj.OU }}/CN={{ kmra.ca_root_crt_subj.CN }}"
  changed_when: true

- name: generate csr for the {{ item.name }}
  command: >-
    openssl req -nodes -newkey rsa:2048
    -keyout {{ (mtls_tmp_dir.path, item.name) | path_join }}.key
    -out {{ (mtls_tmp_dir.path, item.name) | path_join }}.csr
    -subj "/O={{ item.subj.O | default('') }}/OU={{ item.subj.OU | default('') }}/CN={{ item.subj.CN | default('') }}"
  loop: "{{ kmra_apps }}"
  changed_when: true
  when:
    - item.deploy

- name: generate cert for the {{ item.name }} app
  shell: >-
    set -o pipefail &&
    openssl x509 -req -in {{ (mtls_tmp_dir.path, item.name) | path_join }}.csr
    -CA {{ (mtls_tmp_dir.path, 'ca.crt') | path_join }}
    -CAkey {{ (mtls_tmp_dir.path, 'ca.key') | path_join }}
    {{ '-extfile <(printf "subjectAltName=DNS:' + item.subj.CN + ',IP:'
    + hostvars[groups["kube_node"][0]]["ansible_default_ipv4"]["address"] + '")'
    if item.subj.CN | default('') | length > 0 }}
    -CAcreateserial -CAserial {{ (mtls_tmp_dir.path, 'ca.srl' ) | path_join }}
    -out {{ (mtls_tmp_dir.path, item.name) | path_join }}.crt
  args:
    executable: /bin/bash
  loop: "{{ kmra_apps }}"
  loop_control:
    extended: yes
  changed_when: true
  when:
    - item.deploy

- name: create secret for the {{ item.name }} app
  shell: >-
    set -o pipefail && kubectl create secret generic {{ item.name }}-tls
    --from-file=tls.cert={{ (mtls_tmp_dir.path, item.name) | path_join }}.crt
    --from-file=tls.key={{ (mtls_tmp_dir.path, item.name) | path_join }}.key
    --from-file=ca.cert={{ (mtls_tmp_dir.path, 'ca.crt') | path_join }}
    -n {{ kmra.namespace }}
    -o yaml --dry-run=client | kubectl apply -f -
  args:
    executable: /bin/bash
  loop: "{{ kmra_apps }}"
  changed_when: true
  when:
    - item.deploy

- name: clean up tmp directory
  file:
    path: "{{ mtls_tmp_dir.path }}"
    state: absent
  failed_when: false
