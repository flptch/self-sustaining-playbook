##
##   Copyright (c) 2020-2022 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: flow config files
  include_tasks: flow_config_files.yml
  loop: "{{ groups['kube_node'] }}"
  loop_control:
    loop_var: node_name
  when:
    - inventory_hostname == groups['kube_control_plane'][0]

- name: populate Flow Config yaml files and push to controller node
  template:
    src: "{{ item.src }}"
    dest: "{{ (intel_ethernet_operator_flow_config_files_dir, item.dst) | path_join }}"
    force: yes
    mode: preserve
  loop:
    - { src: 'flow-config-sriov-network.yml.j2', dst: 'flow-config-sriov-network.yml' }
    - { src: 'flow-config-node-agent.yml.j2', dst: 'flow-config-node-agent.yml' }

- name: create SRIOV network attachment definition for the DCF VF pool
  k8s:
    state: present
    src: "{{ (intel_ethernet_operator_flow_config_files_dir, 'flow-config-sriov-network.yml') | path_join }}"

- name: create FlowConfig Node Agent deployment CR
  k8s:
    state: present
    src: "{{ (intel_ethernet_operator_flow_config_files_dir, 'flow-config-node-agent.yml') | path_join }}"

- name: wait for FlowConfig Daemon
  pause:
    seconds: 40

- name: create NodeFlowConfig CR
  shell: set -o pipefail && kubectl apply $( ls *node-flow.yml | awk ' { print " -f " $1 } ') # noqa 301
  args:
    chdir: "{{ intel_ethernet_operator_flow_config_files_dir }}"
    executable: /bin/bash

- name: prepare NodeFlowConfig manifests if provided
  include: flow_config_rules.yml
  loop: "{{ groups['kube_node'] }}"
  loop_control:
    loop_var: node_name
  when:
    - inventory_hostname == groups['kube_control_plane'][0]
