##
##   Copyright (c) 2020-2022 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
# server
- name: configure master node
  block:
    - name: clean up any preexisting certs/key/CSR files
      file: path=/etc/ssl/registry state=absent
      failed_when: false
      become: yes

    - name: create registry SSL directory
      become: yes
      file:
        path: /etc/ssl/registry
        state: directory
        mode: '0700'
        owner: root
        group: root

    - name: delete any preexisting certs/key/CSR from Kubernetes
      command: kubectl delete csr registry.{{ registry_namespace }}
      failed_when: false

    - name: delete any preexisting secrets from Kubernetes
      command: kubectl delete secret -n {{ registry_namespace }} {{ registry_secret_name }}
      failed_when: false

    - name: populate registry CSR template
      template:
        src: "registry_csr.json.j2"
        dest: "/etc/ssl/registry/registry-csr.json"
        force: yes
        mode: preserve
      become: yes

    - name: get GOPATH
      command: /usr/local/go/bin/go env GOPATH
      register: gopath
      changed_when: false

    - name: generate key and CSR
      shell: >-
        set -o pipefail && {{ gopath.stdout }}/bin/cfssl genkey registry-csr.json | {{ gopath.stdout }}/bin/cfssljson -bare registry
      args:
        chdir: "/etc/ssl/registry/"
        executable: /bin/bash
      become: yes

    - name: read generated key
      command: cat registry-key.pem
      args:
        chdir: "/etc/ssl/registry/"
      register: key

    - name: load generated key
      set_fact:
        registry_key: "{{ key.stdout }}"

    - name: read generated csr
      command: cat registry.csr
      args:
        chdir: "/etc/ssl/registry/"
      register: csr

    - name: load generated csr
      set_fact:
        registry_csr: "{{ csr.stdout | b64encode }}"

    - name: populate registry Kubernetes CA CSR template
      template:
        src: "kube_registry_csr.yml.j2"
        dest: "/etc/ssl/registry/kube-registry-csr.yml"
        force: yes
        mode: preserve

    - name: send CSR to the Kubernetes API Server
      command: kubectl apply -f /etc/ssl/registry/kube-registry-csr.yml

    - name: approve request
      command: kubectl certificate approve registry.kube-system

    - name: get approved certificate
      shell: kubectl get csr registry.kube-system -o jsonpath='{.status.certificate}'
      args:
        chdir: "/etc/ssl/registry"
      register: cert
      retries: 30
      delay: 1
      until: cert.stdout | length > 0

    - name: load generated cert
      set_fact:
        registry_cert: "{{ cert.stdout | b64decode }}"

    - name: create TLS secret for registry
      command: >-
        kubectl create -n {{ registry_namespace }} secret generic {{ registry_secret_name }}
        --from-literal=tls.crt='{{ registry_cert }}'
        --from-literal=tls.key='{{ registry_key }}'

    - name: clean up
      file: path=/etc/ssl/registry state=absent
      failed_when: false
      become: yes
  when: inventory_hostname == groups['kube_control_plane'][0]

# copy CA file so that registry clients can validate its certificate
- name: copy Kubernetes CA so that registry client can validate registry's certificate
  become: yes
  block:
  - name: remove existing certs and keys
    file: path="/etc/docker/certs.d/{{ registry_local_address }}" state=absent
  - name: ensure that path exists
    file:
      path: "/etc/docker/certs.d/{{ registry_local_address }}"
      mode: '0700'
      owner: root
      group: root
      state: directory
  - name: place Kubernetes CA in the /etc/docker/certs.d
    copy:
      src: /etc/kubernetes/ssl/ca.crt
      dest: "/etc/docker/certs.d/{{ registry_local_address }}/ca.crt"
      remote_src: yes
      mode: '0600'
      owner: root
      group: root
  when: container_runtime == "docker"

# copy CA file so that registry clients can validate its certificate
- name: copy Kubernetes CA so that registry client can validate registry's certificate
  become: yes
  block:
  - name: remove existing certs and keys
    file: path="/etc/containers/certs.d/{{ registry_local_address }}ca.crt" state=absent
  - name: ensure that path exists
    file:
      path: "/etc/containers/certs.d/{{ registry_local_address }}"
      mode: '0700'
      owner: root
      group: root
      state: directory
  - name: place Kubernetes CA in the /etc/containers/certs.d/
    copy:
      src: /etc/kubernetes/ssl/ca.crt
      dest: "/etc/containers/certs.d/{{ registry_local_address }}/ca.crt"
      remote_src: yes
      mode: '0600'
      owner: root
      group: root
  when: '"docker" not in container_runtime'
