##
##   Copyright (c) 2020-2022 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: install dependencies
  include_role:
    name: install_dependencies

- name: install libbpf
  include_tasks: "install_libbpf_{{ ansible_distribution | lower }}.yml"
  when: ansible_distribution | lower == "ubuntu"

- name: clone Intel CNDP repository
  block:
    - name: clone Intel CNDP repository
      git:
        repo: "{{ intel_cndp_git_url }}"
        version: "{{ intel_cndp_version }}"
        dest: "{{ intel_cndp_dir }}"
        force: yes

    - name: build cndp
      make:
        chdir: "{{ intel_cndp_dir }}"

    - name: install cndp
      make:
        target: install
        chdir: "{{ intel_cndp_dir }}"
  when:
    - cndp_enabled | default(false)

# TODO: Check if docker daemon is managed by systemd; get option file from DropInPaths attribute using systemctl show -P DropInPaths docker command

- name: set memlock limit for docker containers via docker-options.conf of docker.service
  block:
    - name: check if --default-ulimit memlock=-1:-1 option does not exist
      lineinfile:
        path: "{{ docker_options_conf_file }}"
        state: absent
        regex: '.*--default-ulimit memlock=-1:-1.*$'
      check_mode: yes
      register: memlock_ulimit_option
      changed_when: not memlock_ulimit_option.changed  # set changed to true when option does not exist

    - name: check if DOCKER_OPTS is formatted in single line in the file
      lineinfile:
        path: "{{ docker_options_conf_file }}"
        state: absent
        regex: '^Environment="DOCKER_OPTS=.*"$'
      check_mode: yes
      register: docker_opts_oneline

    - name: add --default-ulimit memlock=-1:-1 to DOCKER_OPTS when it is formatted in single line
      lineinfile:
        path: "{{ docker_options_conf_file }}"
        backrefs: yes
        regexp: '^(Environment="DOCKER_OPTS=.*)(")$'
        line: '\1 --default-ulimit memlock=-1:-1\2'
      when:
        - memlock_ulimit_option.changed
        - docker_opts_oneline.changed
      notify: restart docker

    - name: check if DOCKER_OPTS is spread over multi lines in the file
      lineinfile:
        path: "{{ docker_options_conf_file }}"
        state: absent
        regex: '^Environment="DOCKER_OPTS=.*\\s*$'
      check_mode: yes
      register: docker_opts_multiline

    - name: add --default-ulimit memlock=-1:-1 to DOCKER_OPTS when it is spread over multi lines
      lineinfile:
        path: "{{ docker_options_conf_file }}"
        insertafter: 'Environment="DOCKER_OPTS='
        line: '--default-ulimit memlock=-1:-1 \'
      when:
        - memlock_ulimit_option.changed
        - docker_opts_multiline.changed
      notify: restart docker
  when:
    - cndp_enabled | default(false)
    - container_runtime == "docker"

- name: set memlock limit for containerd via limits.conf of containerd.service
  block:
    - name: check if limits.conf file exists
      stat:
        path: "{{ containerd_options_conf_file }}"
      register: containerd_conf_file

    - name: create limits.conf when it doesn't exist
      template:
        src: limits.conf.j2
        dest: "{{ containerd_options_conf_file }}"
        mode: 0644
      notify: restart containerd
      when: not containerd_conf_file.stat.exists

  when:
    - cndp_enabled | default(false)
    - container_runtime == "containerd"

- name: set memlock limit for cri-o via limits.conf of crio.service
  block:
    - name: check if limits.conf file exists
      stat:
        path: "{{ crio_options_conf_file }}"
      register: crio_conf_file

    - name: create limits.conf when it doesn't exist
      template:
        src: limits.conf.j2
        dest: "{{ crio_options_conf_file }}"
        mode: 0644
      notify: restart crio
      when: not crio_conf_file.stat.exists

  when:
    - cndp_enabled | default(false)
    - container_runtime == "crio"
