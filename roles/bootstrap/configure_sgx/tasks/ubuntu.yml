##
##   Copyright (c) 2020-2022 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: install dependencies
  include_role:
    name: install_dependencies

- name: create configuration directory if it does not exist
  file:
    path: "{{ sgx_config_dir }}"
    state: directory
    mode: '0700'
  become: yes

- name: confirm DCAP driver module installed
  command: "lsmod"
  register: lsmod_output
  changed_when: false

- name: if intel_sgx module is not available, the block is executed
  block:
    - name: download DCAP drivers
      get_url:
        url: "{{ dcap_driver_url_ubuntu_20 }}"
        dest: "{{ sgx_config_dir }}"
        mode: u=rwx,g=rx,o=rx
        checksum: "{{ dcap_driver_checksum_ubuntu_20 }}"

    - name: install DCAP driver
    # noqa 305 - shell is used intentionally here
      shell: "./{{ dcap_driver_version_ubuntu_20 }}"
      args:
        chdir: "{{ sgx_config_dir }}"
        executable: /bin/bash
      register: dcap_output_ubuntu_20
      failed_when: '"Installation is successful!" not in dcap_output_ubuntu_20.stdout'
      changed_when: '"Installation is successful!" in dcap_output_ubuntu_20.stdout'

    - name: Load SGX module (DCAP)
      modprobe:
        name: intel_sgx
        state: present
  when:
    - not update_kernel
    - '"intel_sgx" not in lsmod_output.stdout'
    - ansible_distribution_version < '21.04'

# WA: sgx packages are available only in the 'focal' repo
# Remove when https://download.01.org/intel-sgx/sgx_repo/ubuntu repo updated
- name: set sgx release name
  set_fact:
    sgx_release_name: "{{ (ansible_distribution_version < '21.04') | ternary(ansible_distribution_release, 'focal') }}"

# WA: Some sgx packages depend on exact versions of packages available only in 'focal' repo
# Remove when https://download.01.org/intel-sgx/sgx_repo/ubuntu repo updated
- name: add 'focal' apt repository
  apt_repository:
    repo: "deb http://archive.ubuntu.com/ubuntu focal main"
  when:
    - ansible_distribution_version >= '21.04'

- name: add {{ sgx_apt_source_list }} repo key
  apt_key:
    url: "{{ sgx_apt_repo_key }}"

- name: add sgx apt repository
  apt_repository:
    repo: "deb {{ sgx_apt_repo_url }} {{ sgx_release_name }} main"
    filename: "{{ sgx_apt_source_list }}"

- name: install sgx platform sw
  apt:
    name:
      - libsgx-launch={{ sgx_pkg_version }}-{{ sgx_release_name }}1
      - libsgx-epid={{ sgx_pkg_version }}-{{ sgx_release_name }}1
      - libsgx-urts={{ sgx_pkg_version }}-{{ sgx_release_name }}1
      - libsgx-quote-ex={{ sgx_pkg_version }}-{{ sgx_release_name }}1
      - libsgx-enclave-common={{ sgx_pkg_version }}-{{ sgx_release_name }}1
      - libsgx-uae-service={{ sgx_pkg_version }}-{{ sgx_release_name }}1
      - sgx-aesm-service={{ sgx_pkg_version }}-{{ sgx_release_name }}1
      - libsgx-dcap-ql={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-ae-qe3={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-ae-qve={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-qe3-logic={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-pce-logic={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-dcap-ql-dev={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-dcap-default-qpl={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-dcap-default-qpl-dev={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-dcap-quote-verify={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-dcap-quote-verify-dev={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-ra-network={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-ra-uefi={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - sgx-ra-service={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1

- name: start aesmd service, if not started
  service:
    state: started
    name: aesmd

# ansible_facts.services is not supported currently on Ubuntu 20.04, once sorted will remove when conditions and merge code as one task.
- name: check status of aesmd service after started
  command: systemctl status aesmd.service
  args:
    warn: false
  register: aesmd_enabled
  changed_when: true

- debug:
    var: aesmd_enabled.stdout_lines

- name: download sgx sdk
  get_url:
    url: "{{ sgx_sdk_url_ubuntu_20 }}"
    dest: "{{ sgx_config_dir }}"
    mode: u=rwx,g=rx,o=rx
    checksum: "{{ sgx_sdk_checksum_ubuntu_20 }}"

- name: install sgx sdk
  shell: "set -o pipefail && echo 'yes' | ./{{ sgx_sdk_version_ubuntu_20 }}"
  args:
    chdir: "{{ sgx_config_dir }}"
    executable: /bin/bash
  register: sdk_output
  failed_when: '"Installation is successful!" not in sdk_output.stdout'
  changed_when: '"Installation is successful!" in sdk_output.stdout'

- name: setup environment & make code samples in hardware mode to ensure package works well
  shell: >
    source {{ sgx_config_dir }}/sgxsdk/environment &&
    make
  args:
    chdir: "{{ sgx_config_dir }}/sgxsdk/SampleCode/LocalAttestation"
    executable: /bin/bash
  register: make_confirm
  failed_when: '"The project has been built in hardware debug mode." not in make_confirm.stdout'
  changed_when: '"The project has been built in hardware debug mode." in make_confirm.stdout'

- name: ensure that sgx driver / psw installed in hardware mode with code samples
  command: ./app
  args:
    chdir: "{{ sgx_config_dir }}/sgxsdk/SampleCode/LocalAttestation/bin"
  register: psw_confirm
  changed_when: '"Succeed" in psw_confirm.stdout'

- debug:
    var: psw_confirm.stdout_lines
  when: '"Succeed" in psw_confirm.stdout'
