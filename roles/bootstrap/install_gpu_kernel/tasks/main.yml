##
##   Copyright (c) 2020-2022 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: install dependencies
  include_role:
    name: install_dependencies

- name: clone gpu kernel repository
  git:
    repo: "{{ gpu_kernel_git_url }}"
    dest: "{{ gpu_kernel_src_dst }}"
    version: 'main'
    force: yes

- name: obtain kernel config file
  copy:
    src: "/boot/config-{{ ansible_kernel }}"
    dest: "{{ gpu_kernel_src_dst }}/.config"
    remote_src: yes
    owner: root
    group: root
    mode: 0755

- name: update kernel config file
  include_tasks: update_kernel_config.yml

- name: setup i915 module loading on boot
  lineinfile:
    path: /etc/modules-load.d/i915.conf
    line: i915
    create: yes
    mode: 0644
  become: yes

- name: make olddefconfig
  make:
    chdir: "{{ gpu_kernel_src_dst }}"
    target: olddefconfig

- name: detect number of cores on system
  command: nproc
  register: nproc_out
  changed_when: false

- name: make linux-headers
  make:
    chdir: "{{ gpu_kernel_src_dst }}"
    target: headers_install
    params:
      INSTALL_HDR_PATH: "/usr/src/linux-headers-{{ gpu_dp_kernel_version }}"
  environment:
    "MAKEFLAGS": "-j{{ nproc_out.stdout | int }}"
  become: yes

- name: do not fail on missinng symbol table
  patch:
    src: "{{ role_path }}/files/objtool_elf.patch"
    dest: "{{ gpu_kernel_src_dst }}/tools/objtool/elf.c"

- name: make targz-pkg
  make:
    chdir: "{{ gpu_kernel_src_dst }}"
    target: targz-pkg
    params:
      INSTALL_MOD_STRIP: 1
  environment:
    "MAKEFLAGS": "-j{{ nproc_out.stdout | int }}"
  become: yes

- name: get linux dg1 firmaware package
  get_url:
    url: "{{ linux_dg1_firmware_url }}"
    dest: "{{ gpu_kernel_src_dst }}"
  changed_when: false

- name: ensure destination directory exists
  file:
    path: /lib/firmware/i915
    state: directory
    mode: 0755

- name: untar dg1 tar.gz archive
  unarchive:
    src: "{{ gpu_kernel_src_dst }}/linux-firmware-dg1_2020.43.tgz"
    dest: /lib/firmware/i915
    extra_opts:
      - --warning=no-timestamp
    mode: 0644
    remote_src: yes
  args:
    creates: /lib/firmware/i915
  become: yes

- name: create dir for custom gpu kernel files
  file:
    path: "{{ gpu_kernel_src_dst }}/gpu_custom_kernel"
    state: directory
    mode: 0644

- name: untar custom linux archive
  unarchive:
    src: "{{ gpu_kernel_src_dst }}/linux-{{ gpu_dp_kernel_version }}-x86.tar.gz"
    dest: "{{ gpu_kernel_src_dst }}/gpu_custom_kernel"
    remote_src: yes
    mode: 0755

- name: copy custom kernel modules
  command: cp -r "{{ gpu_kernel_src_dst }}/gpu_custom_kernel/lib/modules/{{ gpu_dp_kernel_version }}" /lib/modules/
  changed_when: false
  become: yes

- name: install custom kernel
  command: >-
    installkernel {{ gpu_dp_kernel_version }}
    gpu_custom_kernel/boot/vmlinuz-{{ gpu_dp_kernel_version }}
    gpu_custom_kernel/boot/System.map-{{ gpu_dp_kernel_version }}
    /boot
  args:
    chdir: "{{ gpu_kernel_src_dst }}"
  changed_when: false
  become: yes

- name: prepare grub to use custom kernel
  include_tasks: prepare_grub.yml
