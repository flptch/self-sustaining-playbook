##
##   Copyright (c) 2020-2022 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: install dependencies
  include_role:
    name: install_dependencies

- name: clean up any preexisting certs/key/CSR files from {{ host_secrets_folder }}
  become: yes
  file:
    path: "{{ host_secrets_folder }}"
    state: absent

- name: create {{ host_secrets_folder }} folder
  file:
    path: "{{ host_secrets_folder }}"
    state: directory
    mode: u=rwX,g=,o=
    owner: root
    group: root
  become: yes

- name: check if namespace exists
  command: kubectl get namespace {{ k8s_namespace }}
  register: ns_exists
  failed_when: no
  changed_when: false

- name: create a namespace
  command: kubectl create namespace {{ k8s_namespace }}
  when:
    - '"NotFound" in ns_exists.stderr'

- name: check if any pre-existing csr secrets exists in Kubernetes
  command: kubectl get csr {{ secret_name }}.{{ k8s_namespace }}
  register: csr_exists
  failed_when: no
  changed_when: false

- name: delete any pre-existing certs/key/CSR from Kubernetes
  command: kubectl delete csr {{ secret_name }}.{{ k8s_namespace }}
  when:
    - '"NotFound" not in csr_exists.stderr'

- name: populate CSR template
  template:
    src: "csr.json.j2"
    dest: "{{ host_secrets_folder }}/{{ secret_name }}-csr.json"
    force: yes
    mode: preserve

- name: get GOPATH
  command: /usr/local/go/bin/go env GOPATH
  register: gopath
  changed_when: false

- name: generate key and CSR
  shell: >-
    set -o pipefail &&
    {{ gopath.stdout }}/bin/cfssl genkey {{ secret_name }}-csr.json | {{ gopath.stdout }}/bin/cfssljson -bare {{ key_pair_name }}
  args:
    chdir: "{{ host_secrets_folder }}"
    executable: /bin/bash
  changed_when: true

- name: read generated key
  command: cat {{ key_pair_name }}-key.pem
  args:
    chdir: "{{ host_secrets_folder }}"
  register: key
  changed_when: false

- name: load generated key
  set_fact:
    generated_key: "{{ key.stdout | b64encode }}"

- name: read generated csr
  command: cat {{ key_pair_name }}.csr
  args:
    chdir: "{{ host_secrets_folder }}"
  register: csr
  changed_when: false

- name: load generated csr
  set_fact:
    csr: "{{ csr.stdout | b64encode }}"

- name: populate Kubernetes CA CSR template
  template:
    src: "kube_csr.yml.j2"
    dest: "{{ host_secrets_folder }}/{{ secret_name }}-csr.yml"
    force: yes
    mode: preserve

- name: send CSR to the Kubernetes API Server
  command: kubectl apply -f {{ host_secrets_folder }}/{{ secret_name }}-csr.yml
  changed_when: true

- name: approve request
  command: kubectl certificate approve {{ secret_name }}.{{ k8s_namespace }} -n {{ k8s_namespace }}
  changed_when: true

- name: get approved certificate
  shell: kubectl get csr {{ secret_name }}.{{ k8s_namespace }} -o jsonpath='{.status.certificate}'
  args:
    chdir: "/usr/src/"
    executable: /bin/bash
  register: cert
  until: cert.stdout | length > 0
  retries: 30
  delay: 1
  changed_when: false

- name: write signed and decoded certificate to file
  copy:
    content: "{{ cert.stdout | b64decode }}"
    dest: "{{ host_secrets_folder }}/{{ key_pair_name }}-signed.cert"
    mode: 0755

- name: delete existing secret
  command: kubectl delete secret {{ secret_name }} --namespace {{ k8s_namespace }}
  failed_when: false
  changed_when: true

- name: create secret
  command: kubectl create secret generic {{ secret_name }} \
    --namespace {{ k8s_namespace }} \
    --from-file={{ secret_name }}.key={{ host_secrets_folder }}/{{ key_pair_name }}-key.pem \
    --from-file={{ secret_name }}.cert={{ host_secrets_folder }}/{{ key_pair_name }}-signed.cert
  changed_when: true

- name: remove {{ host_secrets_folder }} folder
  become: yes
  file:
    path: "{{ host_secrets_folder }}"
    state: absent

- name: get k8s ca cert
  shell: set -o pipefail && kubectl get configmap -n kube-system extension-apiserver-authentication -o=jsonpath='{.data.client-ca-file}' | base64 | tr -d '\n'
  args:
    executable: /bin/bash
  register: k8s_ca_cert
  changed_when: false
