##
##   Copyright (c) 2020-2022 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: set facts for upstream istio release
  set_fact:
    istio_image: "{{ service_mesh.image }}"
    istio_tag: "{{ service_mesh.version }}"
  when:
    - not service_mesh.intel_preview.enabled

- name: set facts for intel preview istio release
  set_fact:
    istio_image: "{{ service_mesh.intel_preview.image }}"
    istio_tag: "{{ service_mesh.intel_preview.version }}"
  when:
    - service_mesh.intel_preview.enabled

- name: create istio custom manifests directory
  file:
    path: "{{ service_mesh_charts_dir }}"
    state: directory
    mode: 0755

- name: copy custom istio profile manifest if exists
  block:
    - name: create custom istio profiles directory
      file:
        path: "{{ service_mesh_profiles_dir }}"
        state: directory
        mode: 0755
    - name: copy manifest
      copy:
        src: "{{ ('profiles', service_mesh.profile) | path_join }}.yaml"
        dest: "{{ service_mesh_profiles_dir }}"
        owner: root
        mode: preserve
  rescue:
    - name: fallback to empty profile if no requested profile manifest exists
      set_fact:
        service_mesh: "{{ service_mesh | combine({'profile':'empty'}, recursive=True) }}"
  when:
    - service_mesh.profile not in ['default', 'demo', 'minimal', 'external', 'empty', 'preview']

- name: evaluate parameters to be used for istio service mesh installation
  template:
    src: "istioctl-options.yml.j2"
    dest: "{{ (role_path, 'tasks', 'istioctl-options.yml') | path_join }}"
    force: yes
    mode: preserve
  delegate_to: localhost
  become: false

- name: include temporary file contained options provided
  include_vars: "{{ (role_path, 'tasks', 'istioctl-options.yml') | path_join }}"

- name: print out arguments to be used for istio service mesh installation
  debug:
    msg: |
      Following arguments to be used for istio service mesh installation:
      {{ argv | join(' ') }}
  delegate_to: localhost
  become: false

- name: copy istio helm chart to the controller node
  copy:
    src: "{{ (role_path, 'charts', 'istioctl') | path_join }}"
    dest: "{{ service_mesh_charts_dir }}"
    mode: 0755

- name: populate istio charts values templates and push to controller node
  template:
    src: "istioctl-values.yaml.j2"
    dest: "{{ (project_root_dir, 'charts', 'istioctl-values.yaml')  | path_join }}"
    force: yes
    mode: preserve

- name: install intel istio helm chart
  command: >-
    helm upgrade -i istioctl
    --namespace {{ service_mesh.istio_namespace }}
    --create-namespace
    -f {{ (project_root_dir, 'charts', 'istioctl-values.yaml')  | path_join }}
    {{ (service_mesh_charts_dir, 'istioctl') | path_join }}
  changed_when: true

- name: remove temporary files
  file:
    path: "{{ item }}"
    state: absent
  delegate_to: localhost
  become: false
  loop:
    - "{{ (role_path, 'tasks', 'istioctl-options.yml') | path_join }}"
    - "{{ (role_path, 'files', 'profiles', 'custom-ca.yaml') | path_join }}"
